================> In main.py <==================

  from defs import get_cliente_information, listar_clientes, remover_cliente_por_numero, modificar_cliente, get_car_information, listar_car, remove_car_by_number, update_car_info, cliente_status, cahnge_cliente_payment_status, payment, car_status, change_car_status


  print("11. Car status")

  
        elif choice == "11":
            car_list = upload_car(FILE)
            if not car_list:
                print("The list is empty.")
            else:
                change_car_status(FILE) 


================> In defs.py <==================

def car_status(cars):
    print("\nCars status:")
    for i, car in enumerate(cars, start=1):
        print(f"{i}. {car.make} | {car.model} | {car.plate} | {car.car_status}")


  
def change_car_status(FILE):
    cars = upload_car(FILE)
    if not cars:
        print("The car list is empty.")
        return

    car_status(cars)

    try:
        number = int(input("\nEnter the number of the car to change status: "))
        if 1 <= number <= len(cars):
            selected_car = cars[number - 1]
            print(f"\nSelected car: {selected_car}")

            while True:
                new_status = input(f"New status for {selected_car.make} {selected_car.model} (e.g., 'in queue', 'in repair', 'completed'): ")
                if new_status.strip(): # Check if not empty
                    selected_car.car_status = new_status
                    break
                else:
                    print("Status cannot be empty. Please enter a valid status.")

            cars[number - 1] = selected_car  # Update in the list
            save_Car(FILE, cars)  # Save the updated list to the file
            print(f"\nCar status updated to '{new_status}' for {selected_car.make} {selected_car.model}.")

        else:
            print(f"Invalid car number. Please enter a number between 1 and {len(cars)}.")

    except ValueError:
        print("Invalid input. Please enter a valid number.")


===============> In car.py <================

  class Car:
    def __init__(self, make, model, year, plate, complaint, car_status="available"):
        self.make = make
        self.model = model
        self.year = year
        self.plate = plate
        self.complaint = complaint
        self.car_status = car_status

    def __str__(self):
        return f'{self.make};{self.model};{self.year};{self.plate};{self.complaint};{self.car_status}'

    @staticmethod
    def from_string(data_str):
        make, model, year, plate, complaint, car_status = data_str.strip().split(';')
        return Car(make, model, int(year), plate, complaint, car_status)
